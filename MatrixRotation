import java.util.Scanner;

public class MatrixOperations {

    // Function to display the matrix
    public static void displayMatrix(int[][] matrix) {
        for (int[] row : matrix) {
            for (int val : row) {
                System.out.print(val + " ");
            }
            System.out.println();
        }
    }

    // Function for spiral matrix traversal
    public static void spiralMatrix(int[][] matrix) {
        int top = 0, bottom = matrix.length - 1;
        int left = 0, right = matrix[0].length - 1;

        System.out.println("Spiral Order Traversal:");
        while (top <= bottom && left <= right) {
            // Traverse from left to right
            for (int i = left; i <= right; i++) {
                System.out.print(matrix[top][i] + " ");
            }
            top++;

            // Traverse from top to bottom
            for (int i = top; i <= bottom; i++) {
                System.out.print(matrix[i][right] + " ");
            }
            right--;

            // Traverse from right to left
            if (top <= bottom) {
                for (int i = right; i >= left; i--) {
                    System.out.print(matrix[bottom][i] + " ");
                }
                bottom--;
            }

            // Traverse from bottom to top
            if (left <= right) {
                for (int i = bottom; i >= top; i--) {
                    System.out.print(matrix[i][left] + " ");
                }
                left++;
            }
        }
        System.out.println();
    }

    // Function to rotate a specific row to the right
    public static void rotateRow(int[][] matrix, int row, int steps) {
        int cols = matrix[0].length;
        steps = steps % cols; // Handle steps greater than the number of columns
        int[] temp = new int[cols];

        for (int i = 0; i < cols; i++) {
            temp[(i + steps) % cols] = matrix[row][i];
        }

        for (int i = 0; i < cols; i++) {
            matrix[row][i] = temp[i];
        }
    }

    // Function to rotate a specific column downwards
    public static void rotateColumn(int[][] matrix, int col, int steps) {
        int rows = matrix.length;
        steps = steps % rows; // Handle steps greater than the number of rows
        int[] temp = new int[rows];

        for (int i = 0; i < rows; i++) {
            temp[(i + steps) % rows] = matrix[i][col];
        }

        for (int i = 0; i < rows; i++) {
            matrix[i][col] = temp[i];
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Input matrix size
        System.out.print("Enter the number of rows: ");
        int rows = scanner.nextInt();
        System.out.print("Enter the number of columns: ");
        int cols = scanner.nextInt();
        int[][] matrix = new int[rows][cols];

        // Input matrix elements
        System.out.println("Enter the elements of the matrix:");
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                matrix[i][j] = scanner.nextInt();
            }
        }

        // Menu for operations
        System.out.println("Choose an operation:");
        System.out.println("1. Spiral Matrix Traversal");
        System.out.println("2. Rotate a Row");
        System.out.println("3. Rotate a Column");
        int choice = scanner.nextInt();

        switch (choice) {
            case 1:
                spiralMatrix(matrix);
                break;
            case 2:
                System.out.print("Enter the row number to rotate (0-based index): ");
                int row = scanner.nextInt();
                System.out.print("Enter the number of steps to rotate: ");
                int rowSteps = scanner.nextInt();
                rotateRow(matrix, row, rowSteps);
                System.out.println("Matrix after row rotation:");
                displayMatrix(matrix);
                break;
            case 3:
                System.out.print("Enter the column number to rotate (0-based index): ");
                int col = scanner.nextInt();
                System.out.print("Enter the number of steps to rotate: ");
                int colSteps = scanner.nextInt();
                rotateColumn(matrix, col, colSteps);
                System.out.println("Matrix after column rotation:");
                displayMatrix(matrix);
                break;
            default:
                System.out.println("Invalid choice!");
        }

        scanner.close();
    }
}

Key Features
Matrix Traversal:
The spiral traversal is a common algorithmic problem and is implemented efficiently here.
Row/Column Rotations:
These operations are useful in data manipulation tasks (e.g., image transformation).
Potential Enhancements
Input Validation:
Ensure valid row/column indices and steps to prevent runtime errors.
Error Handling:
Handle empty or invalid matrix inputs gracefully.
Extended Operations:
Add more operations like matrix transposition or rotation of the entire matrix.
